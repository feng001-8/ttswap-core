{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_usdt",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_dao_admin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_ttsconfig",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidShortString",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "str",
						"type": "string"
					}
				],
				"name": "StringTooLong",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EIP712DomainChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "leftamount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint120",
						"name": "metric",
						"type": "uint120"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "chips",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					}
				],
				"name": "e_addShare",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "auths",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "priv",
						"type": "uint256"
					}
				],
				"name": "e_addauths",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "users",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "referral",
						"type": "address"
					}
				],
				"name": "e_addreferral",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					}
				],
				"name": "e_burnShare",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "usdtamount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ttsamount",
						"type": "uint256"
					}
				],
				"name": "e_publicsell",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "auths",
						"type": "address"
					}
				],
				"name": "e_rmauths",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "e_setdaoadmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "normalgoodid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "valuegoodid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "marketcontract",
						"type": "address"
					}
				],
				"name": "e_setenv",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "mintamount",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					}
				],
				"name": "e_shareMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "chain",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "poolasset",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "T_BalanceUINT256",
						"name": "proofstate",
						"type": "uint256"
					}
				],
				"name": "e_syncChainStake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "proofvalue",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "T_BalanceUINT256",
						"name": "unstakestate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "T_BalanceUINT256",
						"name": "stakestate",
						"type": "uint256"
					}
				],
				"name": "e_unstake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "poolstate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakestate",
						"type": "uint256"
					}
				],
				"name": "e_updatepool",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint128",
								"name": "leftamount",
								"type": "uint128"
							},
							{
								"internalType": "uint120",
								"name": "metric",
								"type": "uint120"
							},
							{
								"internalType": "uint8",
								"name": "chips",
								"type": "uint8"
							}
						],
						"internalType": "struct s_share",
						"name": "_share",
						"type": "tuple"
					}
				],
				"name": "addShare",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_auths",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_priv",
						"type": "uint256"
					}
				],
				"name": "addauths",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "referral",
						"type": "address"
					}
				],
				"name": "addreferral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					}
				],
				"name": "burnShare",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainid",
						"type": "uint32"
					},
					{
						"internalType": "uint128",
						"name": "asset",
						"type": "uint128"
					}
				],
				"name": "chain_deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainid",
						"type": "uint32"
					},
					{
						"internalType": "uint128",
						"name": "asset",
						"type": "uint128"
					}
				],
				"name": "chain_withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "changeDAOAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_customer",
						"type": "address"
					}
				],
				"name": "getreferral",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_customer",
						"type": "address"
					}
				],
				"name": "getreferralanddaoadmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "isauths",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "left_share",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolstate",
				"outputs": [
					{
						"internalType": "T_BalanceUINT256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "usdtamount",
						"type": "uint256"
					}
				],
				"name": "publicSell",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "publicsell",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_auths",
						"type": "address"
					}
				],
				"name": "rmauths",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_normalgoodid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_valuegoodid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_marketcontract",
						"type": "address"
					}
				],
				"name": "setEnv",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					}
				],
				"name": "shareMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "shares",
				"outputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint128",
						"name": "leftamount",
						"type": "uint128"
					},
					{
						"internalType": "uint120",
						"name": "metric",
						"type": "uint120"
					},
					{
						"internalType": "uint8",
						"name": "chips",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					},
					{
						"internalType": "uint128",
						"name": "proofvalue",
						"type": "uint128"
					}
				],
				"name": "stake",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "netconstruct",
						"type": "uint128"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakestate",
				"outputs": [
					{
						"internalType": "T_BalanceUINT256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint128",
						"name": "asset",
						"type": "uint128"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "subchainDeposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint128",
						"name": "asset",
						"type": "uint128"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "subchainWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainid",
						"type": "uint32"
					},
					{
						"internalType": "uint128",
						"name": "chainvalue",
						"type": "uint128"
					}
				],
				"name": "syncChainStake",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "poolasset",
						"type": "uint128"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint128",
						"name": "amount",
						"type": "uint128"
					}
				],
				"name": "syncPoolAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ttstokenconfig",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					},
					{
						"internalType": "uint128",
						"name": "proofvalue",
						"type": "uint128"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usdt",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "withdrawPublicSell",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements ERC20 token with additional staking and cross-chain functionality",
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"EIP712DomainChanged()": {
					"details": "MAY be emitted to signal that the domain could have changed."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				},
				"e_addShare(address,uint256,uint120,uint8,uint32)": {
					"params": {
						"chips": "The number of chips",
						"index": "The index of the minting operation",
						"leftamount": "The remaining amount to be minted",
						"metric": "The metric used for minting",
						"recipient": "The address receiving the minted tokens"
					}
				},
				"e_addauths(address,uint256)": {
					"params": {
						"auths": "The address being authorized",
						"priv": "The privilege level being granted"
					}
				},
				"e_addreferral(address,address)": {
					"params": {
						"referral": "The address of the referrer",
						"users": "The address of the user"
					}
				},
				"e_burnShare(uint32)": {
					"params": {
						"index": "The index of the minting operation being burned"
					}
				},
				"e_publicsell(uint256,uint256)": {
					"params": {
						"ttsamount": "The amount of TTS involved",
						"usdtamount": "The amount of USDT involved"
					}
				},
				"e_rmauths(address)": {
					"params": {
						"auths": "The address being deauthorized"
					}
				},
				"e_setdaoadmin(address)": {
					"params": {
						"recipient": "The address of the new DAO admin"
					}
				},
				"e_setenv(uint256,uint256,address)": {
					"params": {
						"marketcontract": "The address of the market contract",
						"normalgoodid": "The ID of the normal good",
						"valuegoodid": "The ID of the value good"
					}
				},
				"e_shareMint(uint128,uint32)": {
					"params": {
						"index": "The index of the minting operation",
						"mintamount": "The amount being minted"
					}
				},
				"e_syncChainStake(uint32,uint128,uint256)": {
					"params": {
						"chain": "The chain ID",
						"poolasset": "The pool asset value",
						"proofstate": "The value of the pool"
					}
				},
				"e_unstake(address,uint128,uint256,uint256)": {
					"params": {
						"proofvalue": "The proof value",
						"recipient": "The address receiving the unstaked tokens",
						"stakestate": "The state of the stake",
						"unstakestate": "The state after unstaking"
					}
				},
				"e_updatepool(uint256,uint256)": {
					"params": {
						"poolstate": "The new state of the pool",
						"stakestate": "The new state of the stake"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
				},
				"addShare((address,uint128,uint120,uint8))": {
					"details": "Adds a new mint share to the contract",
					"params": {
						"_share": "The share structure containing recipient, amount, metric, and chips"
					}
				},
				"addauths(address,uint256)": {
					"details": "Adds or updates authorization for an address",
					"params": {
						"_auths": "The address to authorize",
						"_priv": "The privilege level to assign"
					}
				},
				"addreferral(address,address)": {
					"details": "Adds a referral relationship between a user and a referrer",
					"params": {
						"referral": "The address of the referrer",
						"user": "The address of the user being referred"
					}
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"burn(address,uint256)": {
					"details": "Burn tokens from an account",
					"params": {
						"account": "Address of the account to burn tokens from",
						"value": "Amount of tokens to burn"
					}
				},
				"burnShare(uint32)": {
					"details": "Burns (removes) a mint share from the contract",
					"params": {
						"index": "The index of the share to burn"
					}
				},
				"chain_deposit(uint32,uint128)": {
					"details": "Deposits assets to a specific chain",
					"params": {
						"asset": "The amount of assets to deposit",
						"chainid": "The ID of the chain to deposit to"
					}
				},
				"chain_withdraw(uint32,uint128)": {
					"details": "Withdraws assets from a specific chain",
					"params": {
						"asset": "The amount of assets to withdraw",
						"chainid": "The ID of the chain to withdraw from"
					}
				},
				"changeDAOAdmin(address)": {
					"details": "Changes the DAO admin address",
					"params": {
						"_recipient": "The address of the new DAO admin"
					}
				},
				"constructor": {
					"details": "Constructor to initialize the TTS token",
					"params": {
						"_dao_admin": "Address of the DAO admin",
						"_ttsconfig": "Configuration for the TTS token",
						"_usdt": "Address of the USDT token contract"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation",
					"returns": {
						"_0": "The number of decimals"
					}
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"eip712Domain()": {
					"details": "See {EIP-5267}. _Available since v4.9._"
				},
				"getreferral(address)": {
					"details": "Retrieves the referrer address for a given customer",
					"params": {
						"_customer": "The address of the customer"
					},
					"returns": {
						"_0": "The address of the customer's referrer"
					}
				},
				"getreferralanddaoadmin(address)": {
					"details": "Retrieves both the DAO admin address and the referrer address for a given customer",
					"params": {
						"_customer": "The address of the customer"
					},
					"returns": {
						"_0": "A tuple containing the DAO admin address and the customer's referrer address"
					}
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"isauths(address)": {
					"details": "Checks the authorization level of an address",
					"params": {
						"recipient": "The address to check"
					},
					"returns": {
						"_0": "The authorization level of the address"
					}
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
				},
				"publicSell(uint256)": {
					"details": "Perform public token sale",
					"params": {
						"usdtamount": "Amount of USDT to spend on token purchase"
					}
				},
				"rmauths(address)": {
					"details": "Removes authorization from an address",
					"params": {
						"_auths": "The address to remove authorization from"
					}
				},
				"setEnv(uint256,uint256,address)": {
					"details": "Set environment variables for the contract",
					"params": {
						"_marketcontract": "Address of the market contract",
						"_normalgoodid": "ID for normal goods",
						"_valuegoodid": "ID for value goods"
					}
				},
				"shareMint(uint32)": {
					"details": "Allows the DAO to mint tokens based on a specific share",
					"params": {
						"index": "The index of the share to mint from"
					}
				},
				"stake(address,uint128)": {
					"details": "Stake tokens",
					"params": {
						"_staker": "Address of the staker",
						"proofvalue": "Amount to stake"
					},
					"returns": {
						"netconstruct": "Net construct value"
					}
				},
				"subchainDeposit(uint128,address)": {
					"details": "Deposits assets on a sub-chain",
					"params": {
						"asset": "The amount of assets to deposit",
						"recipient": "The address to receive the deposited assets"
					}
				},
				"subchainWithdraw(uint128,address)": {
					"details": "Withdraws assets on a sub-chain",
					"params": {
						"asset": "The amount of assets to withdraw",
						"recipient": "The address to receive the withdrawn assets"
					}
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"syncChainStake(uint32,uint128)": {
					"details": "Synchronize stake across chains",
					"params": {
						"chainid": "ID of the chain",
						"chainvalue": "Value to synchronize"
					},
					"returns": {
						"poolasset": "Amount of pool asset"
					}
				},
				"syncPoolAsset(uint128)": {
					"details": "Synchronizes the pool asset on sub-chains",
					"params": {
						"amount": "The amount to add to the pool state"
					}
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
				},
				"unstake(address,uint128)": {
					"details": "Unstake tokens",
					"params": {
						"_staker": "Address of the staker",
						"proofvalue": "Amount to unstake"
					}
				},
				"withdrawPublicSell(uint256,address)": {
					"details": "Withdraws funds from public token sale",
					"params": {
						"amount": "The amount of USDT to withdraw",
						"recipient": "The address to receive the withdrawn funds"
					}
				}
			},
			"title": "TTS Token Contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"e_addShare(address,uint256,uint120,uint8,uint32)": {
					"notice": "Emitted when minting is added"
				},
				"e_addauths(address,uint256)": {
					"notice": "Emitted when authorizations are added"
				},
				"e_addreferral(address,address)": {
					"notice": "Emitted when a referral is added"
				},
				"e_burnShare(uint32)": {
					"notice": "Emitted when minting is burned"
				},
				"e_publicsell(uint256,uint256)": {
					"notice": "Emitted during a public sale"
				},
				"e_rmauths(address)": {
					"notice": "Emitted when authorizations are removed"
				},
				"e_setdaoadmin(address)": {
					"notice": "Emitted when a DAO admin is set"
				},
				"e_setenv(uint256,uint256,address)": {
					"notice": "Emitted when environment variables are set"
				},
				"e_shareMint(uint128,uint32)": {
					"notice": "Emitted when DAO minting occurs"
				},
				"e_syncChainStake(uint32,uint128,uint256)": {
					"notice": "Emitted when chain stake is synchronized"
				},
				"e_unstake(address,uint128,uint256,uint256)": {
					"notice": "Emitted when unstaking occurs"
				},
				"e_updatepool(uint256,uint256)": {
					"notice": "Emitted when the pool state is updated"
				}
			},
			"kind": "user",
			"methods": {
				"addShare((address,uint128,uint120,uint8))": {
					"notice": "Only callable on the main chain by the DAO adminReduces the left_share by the amount in _shareIncrements the shares_index and adds the new share to the shares mappingEmits an e_addShare event with the share details"
				},
				"addauths(address,uint256)": {
					"notice": "Only the DAO admin can call this function"
				},
				"addreferral(address,address)": {
					"notice": "Only callable by authorized addresses (auths[msg.sender] == 1)Will only set the referral if the user doesn't already have one"
				},
				"burnShare(uint32)": {
					"notice": "Only callable on the main chain by the DAO adminAdds the leftamount of the burned share back to left_shareEmits an e_burnShare event and deletes the share from the shares mapping"
				},
				"chain_deposit(uint32,uint128)": {
					"notice": "Only callable on the main chain by authorized addresses (auths[msg.sender] == 100005)Requires the caller to be the recipient of the chain or the chain to have no recipientUpdates the chain's asset balance"
				},
				"chain_withdraw(uint32,uint128)": {
					"notice": "Only callable on the main chain by authorized addresses (auths[msg.sender] == 100005)Requires the caller to be the recipient of the chain or the chain to have no recipientUpdates the chain's asset balance and checks if the caller has sufficient balance"
				},
				"changeDAOAdmin(address)": {
					"notice": "Only the current DAO admin can call this function"
				},
				"rmauths(address)": {
					"notice": "Only the DAO admin can call this function"
				},
				"shareMint(uint32)": {
					"notice": "Only callable on the main chainRequires the market price to be below a certain thresholdMints tokens to the share recipient, reduces leftamount, and increments metricEmits an e_daomint event with the minted amount and index"
				},
				"subchainDeposit(uint128,address)": {
					"notice": "Only callable on sub-chains by authorized addresses (auths[msg.sender] == 100005)Requires the caller to be the recipient of the chain or the chain to have no recipientUpdates the chain's asset balance and mints the deposited amount to the recipient"
				},
				"subchainWithdraw(uint128,address)": {
					"notice": "Only callable on sub-chains by authorized addresses (auths[msg.sender] == 100005)Requires the caller to be the recipient of the chain or the chain to have no recipientUpdates the chain's asset balance and burns the withdrawn amount from the recipient"
				},
				"syncPoolAsset(uint128)": {
					"notice": "Only callable on sub-chains by authorized addresses (auths[msg.sender] == 5)"
				},
				"withdrawPublicSell(uint256,address)": {
					"notice": "Only callable on the main chain by the DAO adminTransfers the specified amount of USDT to the recipient"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/TTSwap_Token.sol": "TTSwap_Token"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":@erc721permit/=lib/erc721-permit/contracts/",
			":@openzeppelin/=lib/openzeppelin-contracts/",
			":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
			":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
			":forge-gas-snapshot/=lib/forge-gas-snapshot/src/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
				"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
			]
		},
		"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
			"keccak256": "0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc",
				"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
				"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
			"keccak256": "0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174",
			"license": "MIT",
			"urls": [
				"bzz-raw://b5b412e554a4dd37a50f89ffcd7b9a6ef2ae5064f37619f89343b23d58ce89ca",
				"dweb:/ipfs/QmPWMdBvdFk8WBVv625wd1Ar7aehnBWtj1XfFRrRL5KpxJ"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69",
			"license": "MIT",
			"urls": [
				"bzz-raw://28879d01fd22c07b44f006612775f8577defbe459cb01685c5e25cd518c91a71",
				"dweb:/ipfs/QmVgfkwv2Fxw6hhTcDUZhE7NkoSKjab3ipM7UaRbt6uXb5"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
				"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
			"keccak256": "0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256",
			"license": "MIT",
			"urls": [
				"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516",
				"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899",
			"license": "MIT",
			"urls": [
				"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da",
				"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2",
				"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
			"keccak256": "0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a",
				"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"src/TTSwap_Token.sol": {
			"keccak256": "0x76535c12cb320bed762f7b342e3c4716942adb05cab336c22e18d575b1dfc13f",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://13010c8436dd59d4952288c7b50c6e5ad94f485e41142db643642d0e3b5a34da",
				"dweb:/ipfs/QmYH6hu7aG9uSGQGkdFo5J9DDB7NJQm4xcBappak49UefG"
			]
		},
		"src/interfaces/IERC721Permit.sol": {
			"keccak256": "0xfba2d50af2e60911cc3af0451940054ee23e1d3f981dbe0038aa860e81756fdc",
			"license": "MIT",
			"urls": [
				"bzz-raw://24b25dbae8122afdefcd061a194013f6e9814c44e670ef9cc238ad17e275cf0c",
				"dweb:/ipfs/QmRsEerk5aedRXWjyy9qQQwMdoR7X9MGMYRB6XEqN9oFEt"
			]
		},
		"src/interfaces/I_Good.sol": {
			"keccak256": "0xe460bccc5db50563920c3e8a8e51fccb2e9f19c907881a34176eed186e3bc46c",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc8134b95821ae9bd6396a8e681c7010cbab90fe8966bceff2ede7f97c32bd02",
				"dweb:/ipfs/QmPbiuT77GaxcYUvqkQib5ms73F58JnaRGeBKBWAGmHqp4"
			]
		},
		"src/interfaces/I_Marketmanage.sol": {
			"keccak256": "0x7c4ffef2a5a85b8d7d4484dfa5ca27dba106d953925270e4bd7b568a041c99c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://999c6d0b57292a511016efb348370475d9c4c9636da4ff4515130a5c3ab4fda7",
				"dweb:/ipfs/QmWF6AsBbLg4MfinBiw6XoWr1w79HRxx3ACBY6BK4hwpNT"
			]
		},
		"src/interfaces/I_Proof.sol": {
			"keccak256": "0xd7ad9dec684edaa7eeb563054013f3bc73206857120308802f6423ed9454e34c",
			"license": "MIT",
			"urls": [
				"bzz-raw://be76ac9a6515ae29bc36aa3dce8aed189c33a2e7be1792f494e906d0c1c67139",
				"dweb:/ipfs/QmcmGqc5K5k5PRw8uhTQp5LHuAbNhgcuu2AaFGma6GXnVK"
			]
		},
		"src/interfaces/I_TTS.sol": {
			"keccak256": "0x8ed752af4db35d19924c3dc30163cd9285ac784760af87dd09e1226a18feb391",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef35ce9af23baac27ca78d587bce3384337f197a8ea00f3d788418a16fcc18d6",
				"dweb:/ipfs/Qmae8pAqCqX9XUkicHGNatHbCvxG4s28iBJ2e6Gj9awivh"
			]
		},
		"src/libraries/L_BalanceUINT256.sol": {
			"keccak256": "0xb6efd63616449ab5aa0d867fc1cba4ee99b9a576e8eb937e4787ceb416989147",
			"license": "MIT",
			"urls": [
				"bzz-raw://9c070bb4dbe17e6048473e0a178a871b214ab164404ddf13e1849dd3330e5cff",
				"dweb:/ipfs/QmZf9sjYoLXDTjH8qSHiCCRio85YxsJ4g4DQ9ruUMzgA4j"
			]
		},
		"src/libraries/L_Currency.sol": {
			"keccak256": "0x4ec2d182e7a72c7118e840b6322ae2c4e5d8cce877e74ed7692f1726930b86e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://4701b1f19d3ec1fccb680dbc371206a08635ae3ad8bb4db98b8ae02aa38ca64f",
				"dweb:/ipfs/QmXzJvDLbTbAixL44XYnGYEReYML4C7v4sYPVgnongX2WW"
			]
		},
		"src/libraries/L_Good.sol": {
			"keccak256": "0xcf6c9f2cfc70e5cc2b532be9fbde88c4e0c040969f677b21124b4f50ba75ec01",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://637a74816f6ed4ced8a64f088f1a3c8f544cb7db63ae6d8c79d35fbbeefa28ff",
				"dweb:/ipfs/QmWv31RafYaPJQJ39GHPhYFy9y6ZMU8hv2dtsGcmd9Yvc7"
			]
		},
		"src/libraries/L_GoodConfig.sol": {
			"keccak256": "0x7308ecfd2ff16633de529b38ff668a64c903b9d80dd70942710b410c2fd28cec",
			"license": "MIT",
			"urls": [
				"bzz-raw://17f5c6ec2a734c71f128b3487b55984d8cf3f44ea5392a9ecb6de63b11c709d7",
				"dweb:/ipfs/QmVyU9mA1R3rsqwz3UGuk58XG5c5r2x7rtDP4Yj38AAQSD"
			]
		},
		"src/libraries/L_MarketConfig.sol": {
			"keccak256": "0x7bf482a86f6fc00d6a3a72aa4fc6c9826d2c0b0f9d71d4742bb01fe2ecb0025a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c1b9fefd12668bfa976ae0247cda8ce49201050cace9fc9a82d53f8c19b7ae7",
				"dweb:/ipfs/QmbBhcwABg6T44iDmUPv3PhtHohNUHuPQSKeMPmmndgmcy"
			]
		},
		"src/libraries/L_Proof.sol": {
			"keccak256": "0x5ddc4c90e43e12ff8d8f061dbae2089ee1d022450380e532f206b8edeede56ef",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://0701444a99cb05e161b36f501e688ab3aec867b6844ef59fa2511fe148a13b3e",
				"dweb:/ipfs/QmZqX7UVXBSHtieQHwKbrKqqiMKV57xWXXh92cDyhkWzMx"
			]
		},
		"src/libraries/L_Struct.sol": {
			"keccak256": "0x82b7610a79a4d5f041a95f4089c7a9c4c96bf4988aed58beec001645adaad491",
			"license": "MIT",
			"urls": [
				"bzz-raw://2df06fab4728a389b0e60538aa5a4aab84f72b342df69aba55c5fa950eaa2ae9",
				"dweb:/ipfs/QmPd262UGBGbJ8vh4nz9ECD32bayv6kHfPYas3ThRq6Zz2"
			]
		},
		"src/libraries/L_TTSTokenConfig.sol": {
			"keccak256": "0xdb8218eb073f3c93a7609147fd789e4148b218f92a379541ab2cdcf568556cff",
			"license": "MIT",
			"urls": [
				"bzz-raw://783f9e87cbabe1b999198874b87ef125279ba35605f34a7dc841ef903570075c",
				"dweb:/ipfs/QmeuGraUbNvZYSwnA5U9tW3JudktkrmsFYbs78YdVnRgRw"
			]
		}
	},
	"version": 1
}